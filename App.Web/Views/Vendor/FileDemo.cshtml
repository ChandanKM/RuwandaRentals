@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>File Demo</title>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/knockout-3.1.0.debug.js"></script>

</head>
<body>
    <div id="bindMe">
        <input type="file" accept="image/*" data-bind="files: imageFile, fileObjectURL: imageObjectURL, fileBinaryData: imageBinary" />
        <div data-bind="if: imageObjectURL">
            <img data-bind="attr: { src: imageObjectURL }" style="height:150px;width:150px;" />
        </div>
        <input type="button" data-bind="click:SubmitImage" value="submit" />
    </div>
    <script type="text/javascript">
        var windowURL = window.URL || window.webkitURL;


        ko.bindingHandlers.files = {
            init: function (element, valueAccessor) {
                var value = ko.unwrap(valueAccessor());
                $(element).change(function () {
                    var file = this.files[0];
                    if (ko.isObservable(valueAccessor())) {
                        valueAccessor()(file);
                    }
                });
            },

            update: function (element, valueAccessor, allBindingsAccessor) {

                var file = ko.utils.unwrapObservable(valueAccessor());
                var bindings = allBindingsAccessor();

                if (bindings.fileObjectURL && ko.isObservable(bindings.fileObjectURL)) {
                    var oldUrl = bindings.fileObjectURL();
                    if (oldUrl) {
                        windowURL.revokeObjectURL(oldUrl);
                    }
                    bindings.fileObjectURL(file && windowURL.createObjectURL(file));
                }

                if (bindings.fileBinaryData && ko.isObservable(bindings.fileBinaryData)) {
                    if (!file) {
                        bindings.fileBinaryData(null);
                    } else {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            bindings.fileBinaryData(e.target.result);
                        };
                        reader.readAsArrayBuffer(file);
                    }
                }
            }
        };

    </script>

    <script type="text/javascript">
        var vendorViewModel = new VendorViewModel();
        ko.applyBindings(vendorViewModel, document.getElementById("bindMe"));

        function VendorViewModel() {
            var self = this;

            self.imageFile = ko.observable();
            self.imageObjectURL = ko.observable();
            self.imageBinary = ko.observable();
            self.slotModel = function () {
                var that = {};

                that.firstBytes = ko.computed(function () {
                    if (self.imageBinary()) {
                        var buf = new Uint8Array(self.imageBinary());
                        var bytes = [];
                        for (var i = 0; i < buf.length ; ++i) {
                            bytes.push(buf[i]);
                        }
                        return bytes;
                    } else {
                        return '';
                    }
                }, that);

                return that;
            };
            self.images = ko.observableArray([self.slotModel()]);
          
            self.SubmitImage = function () {
                $.ajax({

                    url: "../Vendor/ImageUpload",
                    type: "POST",
                    data: {
                        file:vendorViewModel.images._latestValue[0].firstBytes()             
                    },
                    traditional: true,
                    success: function (response) {

                    },
                    error: function (er) {
                        alert(er);
                    }
                });
            }
        }
       
    

    </script>




</body>
</html>
